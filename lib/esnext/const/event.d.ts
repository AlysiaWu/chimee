export declare const domEvents: string[];
export declare type IDomEvent = 'beforeinput' | 'blur' | 'click' | 'compositionend' | 'compositionstart' | 'compositionupdate' | 'dblclick' | 'focus' | 'focusin' | 'focusout' | 'input' | 'keydown' | 'keypress' | 'keyup' | 'mousedown' | 'mouseenter' | 'mouseleave' | 'mousemove' | 'mouseout' | 'mouseover' | 'mouseup' | 'resize' | 'scroll' | 'select' | 'wheel' | 'mousewheel' | 'contextmenu' | 'touchstart' | 'touchmove' | 'touchend' | 'fullscreen';
export declare function isDomEvent(x: string): x is IDomEvent;
export declare const esFullscreenEvents: string[];
export declare const dispatcherEventMethodMap: {
    enterpictureinpicture: 'requestPictureInPicture';
    leavepictureinpicture: 'exitPictureInPicture';
    load: 'load';
};
export declare type IDispatcherEventMethod = 'enterpictureinpicture' | 'leavepictureinpicture' | 'load';
export declare function isDispatcherEventMethod(x: string): x is IDispatcherEventMethod;
export declare const mustListenVideoDomEvents: string[];
export declare type IMustListenVideoDomEvent = 'mouseenter' | 'mouseleave';
export declare function isMustListenVideoDomEvent(x: string): x is IMustListenVideoDomEvent;
export declare const kernelEvents: string[];
export declare const passiveEvents: string[];
export declare const selfProcessorEvents: string[];
export declare const videoEvents: string[];
export declare type IVideoEvent = 'abort' | 'canplay' | 'canplaythrough' | 'durationchange' | 'emptied' | 'encrypted' | 'ended' | 'error' | 'interruptbegin' | 'interruptend' | 'loadeddata' | 'loadedmetadata' | 'loadstart' | 'mozaudioavailable' | 'pause' | 'play' | 'playing' | 'progress' | 'ratechange' | 'seeked' | 'seeking' | 'stalled' | 'suspend' | 'timeupdate' | 'volumechange' | 'waiting' | 'enterpictureinpicture' | 'leavepictureinpicture';
export declare function isVideoEvent(x: string): x is IVideoEvent;
